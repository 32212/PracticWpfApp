//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PracticWpfApp
{
    using PracticWpfApp.Classes;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Windows.Media;

    public partial class Order
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Order()
        {
            this.OrderProduct = new HashSet<OrderProduct>();
        }
    
        public int OrderID { get; set; }
        public int OrderNumber { get; set; }
        public System.DateTime OrderDate { get; set; }
        public System.DateTime OrderDeliveryDate { get; set; }
        public int ProductPointOfIssuesID { get; set; }
        public Nullable<int> UserId { get; set; }
        public int OrderStatusID { get; set; }
        public string OrderCode { get; set; }
    
        public virtual OrderStatus OrderStatus { get; set; }
        public virtual ProductPointOfIssues ProductPointOfIssues { get; set; }
        public virtual User User { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<OrderProduct> OrderProduct { get; set; }

        public double DiscountPrice
        {
            get
            {
                List<OrderProduct> products = BaseClass.EM.OrderProduct.Where(x => x.OrderID == OrderID).ToList();
                double sum = 0;
                foreach (OrderProduct product in products)
                {
                    sum = sum + (Convert.ToDouble(product.Product.DiscountPrice) * product.Count);
                }
                double summa = 0;
                foreach (OrderProduct product in products)
                {
                    summa = summa + (Convert.ToDouble(product.Product.ProductCost) * product.Count);
                }
                double proc = (summa - sum) / summa * 100;
                return proc;
            }
        }
        public double SumDiscount
        {
            get
            {
                List<OrderProduct> products = BaseClass.EM.OrderProduct.Where(x => x.OrderID == OrderID).ToList();
                double sum = 0;
                foreach (OrderProduct product in products)
                {
                    sum = sum + (Convert.ToDouble(product.Product.ProductCost) * Convert.ToDouble(product.Product.DiscountPrice) / 100) * product.Count;
                }
                return sum;
            }
        }
    }
}
